import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class AddRemoveEmployee {
    
    // Class to represent an employee
    static class Employee {
        String employeeNumber;
        String employeeName;
        String birthday;
        double hourlyRate;
        double sssMonthly;
        double pagIbigMonthly;
        double philhealthMonthly;
        double withholdingTaxMonthly;

        public Employee(String employeeNumber, String employeeName, String birthday, double hourlyRate,
                        double sssMonthly, double pagIbigMonthly, double philhealthMonthly, double withholdingTaxMonthly) {
            this.employeeNumber = employeeNumber;
            this.employeeName = employeeName;
            this.birthday = birthday;
            this.hourlyRate = hourlyRate;
            this.sssMonthly = sssMonthly;
            this.pagIbigMonthly = pagIbigMonthly;
            this.philhealthMonthly = philhealthMonthly;
            this.withholdingTaxMonthly = withholdingTaxMonthly;
        }

        @Override
        public String toString() {
            return "Employee Number: " + employeeNumber + ", Name: " + employeeName + ", Birthday: " + birthday +
                    ", Hourly Rate: " + hourlyRate + ", SSS: " + sssMonthly + ", PAG-IBIG: " + pagIbigMonthly +
                    ", PhilHealth: " + philhealthMonthly + ", Withholding Tax: " + withholdingTaxMonthly;
        }
    }

    public static double calculateGrossSalary(double hoursWorked, double hourlyRate) {
        return hoursWorked * hourlyRate;
    }

    public static double calculateNetSalary(double grossSalary, double totalWeeklyDeductions) {
        return grossSalary - totalWeeklyDeductions;
    }

    public static void main(String[] args) {
        ArrayList<Employee> employees = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        // Initial employee data (can be loaded from a file in a real application)
        employees.add(new Employee("10001", "Manuel Garcia", "1983-10-11", 535.71, 1125.00, 100.00, 1350.00, 17060.40));
        employees.add(new Employee("10002", "Antonio Lim", "06-19-1988", 357.14, 1125.00, 100.00, 900.00, 8635.50));
        employees.add(new Employee("10003", "Bianca Sofia Aquino", "08-04-1989", 357.14, 1125.00, 100.00, 900.00, 8635.50));
        employees.add(new Employee("10004", "Isabella Reyes", "06-16-1994", 357.14, 1125.00, 100.00, 900.00, 8635.50));
        employees.add(new Employee("10005", "Eduard Hernandez", "09-23-1989", 313.51, 1125.00, 100.00, 790.05, 6830.49));
        employees.add(new Employee("10006", "Andrea Mae Villanueva", "02-14-1988", 313.51, 1125.00, 100.00, 790.05, 6830.49));
        employees.add(new Employee("10007", "Brad San Jose", "03-15-1996", 255.80, 1125.00, 100.00, 664.63, 4443.09));
        employees.add(new Employee("10008", "Alice Romualdez", "05-14-1992", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10009", "Rosie Atienza", "09-24-1948", 133.93,1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10010", "Roderick Alvaro", "03-30-1988", 313.51, 1125.00, 100.00, 790.05, 6830.49));
        employees.add(new Employee("10011", "Anthony Salcedo", "09-14-1993", 302.53, 1125.00, 100.00, 762.38, 6376.16));
        employees.add(new Employee("10012", "Josie Lopez", "01-14-1987", 229.02, 1125.00, 100.00, 577.13, 3334.97));
        employees.add(new Employee("10013", "Martha Farala", "01-11-1942", 142.86, 1080.00, 100.00, 360.00, 325.40));
        employees.add(new Employee("10014", "Leila Martinez", "07-11-1970", 142.86, 1080.00, 100.00, 360.00, 325.40));
        employees.add(new Employee("10015", "Fredrick Romualdez", "03-10-1985", 318.45, 1125.00, 100.00, 802.50, 7034.88));
        employees.add(new Employee("10016", "Christian Mata", "10-21-1987", 255.80, 1125.00, 100.00, 644.43, 4443.09));
        employees.add(new Employee("10017", "Selena De Leon", "02-20-1975", 249.11,1125.00, 100.00, 627.75, 4166.06));
        employees.add(new Employee("10018", "Allison San Jose", "06-24-1986", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10019", "Cydney Rosario", "10-06-1996", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10020", "Mark Bautista", "02-12-1991", 133.93, 1035.00, 100.00, 348.75, 186.65));
        employees.add(new Employee("10021", "Darlene Lazaro", "11-25-1985", 133.93, 1035.00, 100.00, 348.75, 186.65));
        employees.add(new Employee("10022", "Kolby Delos Santos", "02-26-1980", 142.86, 1080.00, 100.00, 360.00, 325.40));
        employees.add(new Employee("10023", "Vella Santos", "12-31-1983", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10024", "Tomas Del Rosario", "12-18-1978", 133.93, 1012.50, 100.00, 337.050, 43.40));
        employees.add(new Employee("10025", "Jacklyn Tolentino", "05-19-1984", 142.86, 1080.00, 100.00, 360.00, 325.40));
        employees.add(new Employee("10026", "Percival Gutierrez", "12-18-1970", 147.32, 1102.50, 100.00, 371.20, 468.65));
        employees.add(new Employee("10027", "Garfield Manalaysay", "08-28-1986", 147.32, 1102.50, 100.00, 371.25, 468.65));
        employees.add(new Employee("10028", "Lizeth Villegas", "12-12-1981", 142.86, 1080.00, 100.00, 360.00, 325.40));
        employees.add(new Employee("10029", "Carol Ramos", "08-20-1978", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10030", "Emelia Maceda", "04-14-1973", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10031", "Delia Aguilar", "01-27-1989", 133.93, 1012.50, 100.00, 337.50, 43.40));
        employees.add(new Employee("10032", "John Rafael Castro", "02-09-1992", 313.51, 1125.00, 100.00, 790.05, 6830.49));
        employees.add(new Employee("10033", "Carlos Ian Martinez", "11-16-1990", 313.51, 1125.00, 100.00, 790.05, 6830.49));
        employees.add(new Employee("10034", "Beatriz Santos", "08-07-1990", 313.51, 1125.00, 100.00, 790.05, 6830.49));

        // Main loop for the application
        while (true) {
            System.out.println("\nEmployee Management System Menu:");
            System.out.println("1. Display All Employees");
            System.out.println("2. Retrieve Employee Data and Calculate Salary");
            System.out.println("3. Add New Employee");
            System.out.println("4. Remove Employee");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            int choice = -1; // Initialize to an invalid value
            try {
                choice = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number between 1 and 5.");
                scanner.next(); // Consume the invalid input
                continue; // Restart the loop
            }
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1 -> displayAllEmployees(employees);
                case 2 -> retrieveAndCalculateSalary(employees, scanner);
                case 3 -> addNewEmployee(employees, scanner);
                case 4 -> removeEmployee(employees, scanner);
                case 5 -> {
                    System.out.println("Exiting the application.");
                    scanner.close();
                    return;
                }
                default -> System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // Method to display all employees
    public static void displayAllEmployees(ArrayList<Employee> employees) {
        if (employees.isEmpty()) {
            System.out.println("No employees to display.");
            return;
        }
        System.out.println("\n--- All Employees ---");
        for (Employee employee : employees) {
            System.out.println(employee); // Uses the toString() method of Employee class
        }
    }

    // Method to retrieve employee data and calculate salary
    public static void retrieveAndCalculateSalary(ArrayList<Employee> employees, Scanner scanner) {
        if (employees.isEmpty()) {
            System.out.println("No employees available to retrieve data.");
            return;
        }

        System.out.print("Enter Employee Number to retrieve data: ");
        String searchEmployeeNumber = scanner.nextLine();

        Employee selectedEmployee = null;
        for (Employee employee : employees) {
            if (employee.employeeNumber.equals(searchEmployeeNumber)) {
                selectedEmployee = employee;
                break;
            }
        }

        if (selectedEmployee != null) {
            System.out.println("\nEmployee Information:");
            System.out.println("Employee Number: " + selectedEmployee.employeeNumber);
            System.out.println("Employee Name: " + selectedEmployee.employeeName);
            System.out.println("Employee Birthday: " + selectedEmployee.birthday);

            System.out.print("\nEnter number of hours worked in a week: ");
            double hoursWorked = 0;
            try{
                hoursWorked = scanner.nextDouble();
            } catch (InputMismatchException e){
                System.out.println("Invalid hours worked input.");
                scanner.nextLine();
                return;
            }
            scanner.nextLine(); // Consume the newline

            double grossSalary = calculateGrossSalary(hoursWorked, selectedEmployee.hourlyRate);

            // Calculate weekly deductions from monthly deductions
            double sssWeekly = selectedEmployee.sssMonthly / 4;
            double pagIbigWeekly = selectedEmployee.pagIbigMonthly / 4;
            double philhealthWeekly = selectedEmployee.philhealthMonthly / 4;
            double withholdingTaxWeekly = selectedEmployee.withholdingTaxMonthly / 4;

            double totalWeeklyDeductions = sssWeekly + pagIbigWeekly + philhealthWeekly + withholdingTaxWeekly;

            double netSalary = calculateNetSalary(grossSalary, totalWeeklyDeductions);

            System.out.println("\nEmployee Weekly Salary Details:");
            System.out.println("Gross Weekly Salary: $" + grossSalary);
            System.out.printf("SSS Weekly Deduction: $%.2f\n", sssWeekly);
            System.out.printf("PAG-IBIG Weekly Deduction: $%.2f\n", pagIbigWeekly);
            System.out.printf("PhilHealth Weekly Deduction: $%.2f\n", philhealthWeekly);
            System.out.printf("Withholding Tax Weekly Deduction: $%.2f\n", withholdingTaxWeekly);
            System.out.println("Net Weekly Salary (after deductions): $" + netSalary);
        } else {
            System.out.println("Employee not found.");
        }
    }

    // Method to add a new employee
    public static void addNewEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.println("\n--- Add New Employee ---");
        System.out.print("Enter Employee Number: ");
        String newEmployeeNumber = scanner.nextLine();

        // Check if the employee number already exists
        for (Employee employee : employees) {
            if (employee.employeeNumber.equals(newEmployeeNumber)) {
                System.out.println("Employee Number already exists.  Please enter a unique number.");
                return; // Return to the main menu
            }
        }

        System.out.print("Enter Employee Name: ");
        String newEmployeeName = scanner.nextLine();
        System.out.print("Enter Employee Birthday (YYYY-MM-DD): ");
        String newEmployeeBirthday = scanner.nextLine();

        System.out.print("Enter Hourly Rate: ");
        double newEmployeeHourlyRate = 0;
        try {
            newEmployeeHourlyRate = scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Invalid hourly rate.  Please enter a valid number.");
            scanner.nextLine();
            return;
        }
        System.out.print("Enter SSS Monthly Deduction: ");
        double newEmployeeSss = 0;
        try{
            newEmployeeSss = scanner.nextDouble();
        } catch (InputMismatchException e){
            System.out.println("Invalid SSS monthly deduction.");
            scanner.nextLine();
            return;
        }
        System.out.print("Enter PAG-IBIG Monthly Deduction: ");
        double newEmployeePagIbig = 0;
        try {
            newEmployeePagIbig = scanner.nextDouble();
        } catch(InputMismatchException e) {
            System.out.println("Invalid PAG-IBIG deduction.");
            scanner.nextLine();
            return;
        }

        System.out.print("Enter PhilHealth Monthly Deduction: ");
        double newEmployeePhilhealth = 0;
        try {
            newEmployeePhilhealth = scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Invalid PhilHealth deduction.");
            scanner.nextLine();
            return;
        }
        System.out.print("Enter Withholding Tax Monthly Deduction: ");
        double newEmployeeWithholdingTax = 0;
        try {
            newEmployeeWithholdingTax = scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.out.println("Invalid withholding tax.");
            scanner.nextLine();
            return;
        }
        scanner.nextLine(); // Consume the newline

        employees.add(new Employee(newEmployeeNumber, newEmployeeName, newEmployeeBirthday, newEmployeeHourlyRate,
                newEmployeeSss, newEmployeePagIbig, newEmployeePhilhealth, newEmployeeWithholdingTax));
        System.out.println("New employee added successfully.");
    }

    // Method to remove an employee
    public static void removeEmployee(ArrayList<Employee> employees, Scanner scanner) {
        if (employees.isEmpty()) {
            System.out.println("No employees to remove.");
            return;
        }

        System.out.print("Enter Employee Number to remove: ");
        String removeEmployeeNumber = scanner.nextLine();

        for (int i = 0; i < employees.size(); i++) {
            if (employees.get(i).employeeNumber.equals(removeEmployeeNumber)) {
                employees.remove(i);
                System.out.println("Employee removed successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }
}
